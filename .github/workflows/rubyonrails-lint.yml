# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies, and  run linters
env:
  RUBY_VERSION: 2.7
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres

name: Rails - Install dependencies, run linters & rspec

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  # run-lint:
  #   name: Rubocop & Brakeman
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Setup Ruby and install gems
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #     - name: Install rubocop/brakeman
  #       run: |
  #         gem install rubocop
  #         gem install brakeman
  #     # Add or Replace any other security checks here
  #     - name: Run security checks
  #       run: |
  #         bundle exec bundle audit --update
  #         brakeman -q -w2
  #     # Add or Replace any other Linters here
  #     - name: Run linters
  #       run: |
  #         rubocop --parallel
  run-rspec:
    name: RSpec
    #    needs: run-lint
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: orte_test
        ports:
          - 3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Install postgres client
        run: sudo apt-get install libpq-dev
      - name: Create database
        env:
          RAILS_ENV: test
          DB_PORT: 3306
        run: |
          sudo service mysql start
          bundler exec rails db:create RAILS_ENV=test
          bundler exec rails db:migrate RAILS_ENV=test
      - name: Run tests
        env:
          RAILS_ENV: test
          DB_PORT: 3306
        run: bundler exec rspec spec RAILS_ENV=test
      - name: Upload coverage results
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage
