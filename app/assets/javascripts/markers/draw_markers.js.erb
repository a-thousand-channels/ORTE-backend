

function drawMarkers(map,layer_id,level,show_annotations_on_map,text_layers,image_layers,marker_layers,params,color,clustercolor,places) {
    var c = 0;
    console.log("Setting show_annotations_on_map set to "+show_annotations_on_map);
    var CustomLargeIcon = L.Icon.extend({
        options: {
            iconSize:     [30, 30],
            iconAnchor:   [15, 15],
            popupAnchor:  [-2, -15]
        }
    });
    var CustomSmallIcon = L.Icon.extend({
        options: {
            iconSize:     [20, 20],
            iconAnchor:   [10, 10],
            popupAnchor:  [-1, -8]
        }
    });

    var iconSettings = {
        mapIconUrl: "<svg height='{radius}' width='{radius}' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='{color}' fill-opacity='{opacity}' shape-rendering='geometricPrecision'></circle></svg>",
        color: '#cc756b',
        opacity: 1,
        radius: 30
    };
    var divIcon = L.divIcon({
        className: "leaflet-data-marker",
        html: L.Util.template(iconSettings.mapIconUrl, iconSettings), //.replace('#','%23'),
        iconAnchor  : [15, 15],
        iconSize    : [30, 30],
        popupAnchor : [0, -28]
    });

    $.each(places, function(key,place) {
      console.log("Place ID " + place.id + " at Layer " + layer_id + " // Title: " + place.title);
      var opacity = '0.4';
      var stroke = 'transparent';
      var stroke_width = '0';
      var stroke_opacity = '0';
      if ( color ) {
        this_color = color;
        if ( place.published === true ) {
          opacity= '0.7';
        }
        if ( $('#selection').data('place-id') === place.id ) {
          opacity = '0.7';
          stroke = '#000000';
          this_color = '#ffff00';
          stroke_width = '2'
          stroke_opacity = '0.5'
        }
        if (color.indexOf('#') == -1) {
          color = '#'+color;
        }
        var svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='13' cy='13' r='13' fill='"+this_color+"' fill-opacity='"+opacity+"' stroke='"+stroke+"' stroke-width='"+stroke_width+"' stroke-opacity='"+stroke_opacity+"'  shape-rendering='geometricPrecision'></circle></svg>";
        var url = encodeURI("data:image/svg+xml," + svg).replace(new RegExp('#', 'g'),'%23');
        var icon = new CustomLargeIcon({iconUrl: url});
      } else {
        if ( parseInt(place.id) === parseInt(params.place) ) {
          var icon = redIcon;
          console.log("PLACE FOR RE_MAP FOUND");
        } else if ( place.published === true ) {
           var icon = blueIcon;
        } else {
          var icon = greyIcon;
        }
      }


      // alternative place display marker as text
      // TODO: display switch
      var text_angle = ( Math.random() * 35) - 55;
      //       text_angle = 0;

      var texticon= L.divIcon({
          html: '<div class="text_inner" style="transform: rotate('+text_angle+'deg)">'+place.title+'</div>',
          iconAnchor:[-5,25],
          iconSize:null,
          popupAnchor:[0,0] });
      var textmarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: texticon});


      // alternative place display image instead of a marker
      var small_opacity="0.8";
      var small_color=adjustColor(color, -60);
      var small_svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='"+small_color+"' fill-opacity='"+small_opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
      var small_icon_url = encodeURI("data:image/svg+xml," + small_svg).replace(new RegExp('#', 'g'),'%23');
      var small_icon =new CustomSmallIcon({iconUrl: small_icon_url})
      var small_icon_marker = L.marker([place.lat, place.lon], {icon: small_icon}).addTo(image_layers);

      var html = '';

      if ( place.images && place.images[0] ) {
        html = "<a href='"+place.images[0].image_url+"' target='_blank'><img src='"+place.images[0].image_url+"' /></a>";
      } else {
        html = "";
      }
      if ( place.imagelink2 ) {
        html = "<img src='"+place.imagelink2+"' />";
      }
      var imageicon= L.divIcon({
          html: '<div class="image_inner">'+html+'</div>',
          iconAnchor:[0,0],
          iconSize:null,
          popupAnchor:[0,0] });
      var imagemarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: imageicon}).addTo(image_layers);



      // TODO: add to layer, not map
      // var marker = L.marker([place.lat, place.lon], {icon: icon}).addTo(marker_layers);
      // layercluster
      var marker = L.marker([place.lat, place.lon], {icon: icon});

      // TODO: use this ID for triggering relations visibility (show relation on hover)
      // marker.CustomID = 'marker_to_'+place.id;
      if ( ( level != 'maps' ) || ( place.shy == false )) {
        marker_layers.addLayer(marker);
        text_layers.addLayer(textmarker);
        // text_layers.addLayer(marker);
      }

      var content = PopupFullContent(place);
      marker.bindPopup(content).on('click', function(){

          // map.panTo(marker.getLatLng());
          // map.panToOffset(marker.getLatLng(),[0,60]);

          if ( $('#addresslookup_address').hasClass('hide') ) {
            // ShowLookUpField();
          } else {
            clearLookUpField();
          }

      });
      marker.on('click', function (e) {
        console.log('marker');
        console.log(e);
      });

      // TODO: change color of marker
      marker_layers.on('clusterclick', function (a) {
        // a.layer is actually a cluster
        // console.log('cluster ' + a.layer.getAllChildMarkers().length);
        // console.log(a.originalEvent.target);
        // console.log(a.originalEvent.target.closest(".leaflet-interactive").classList);
        // $(a.originalEvent.target).closest(".leaflet-interactive").toggleClass("cluster_expanded");
      });
      if ( $('#selection').data('map-popup-display-mode') != 'click' ) {
        marker.on('mouseover', function (e) {
            map.closePopup();
            this.openPopup();
        });
        marker.on('mouseout', function (e) {
            // this.closePopup();
        });
      }
      // NEW 2021: Add annotations on the map, if any
      if ( show_annotations_on_map && place.annotations ) {
        $.each(place.annotations, function(kkey,annotation) {
          var a_marker = L.marker([place.lat, place.lon], {icon: small_icon})
          marker_layers.addLayer(a_marker);
          var content = '';
          content += '<div class="leaflet-popup-content-text">';
          content += "<p>";
          if ( annotation.person_name ) {
            content += annotation.person_name;
          }
          if ( place.show_link ) {
            content += ' @ ';
            content += place.show_link;
          }
          content += "</p>";
          content += "<p>";
          if ( annotation.title ) {
            content += "<strong>";
            content += annotation.title;
            content += "</strong>";
          }
          content += annotation.text.substring(0, 550).split(" ").slice(0, -1).join(" ") + "...";
          content += "</p>";

          a_marker.bindPopup(content).on('click');
          a_marker.on('click', function (e) {
            console.log('marker');
            console.log(e);
          });
          a_marker.on('clusterclick', function (e) {
            // a.layer is actually a cluster
            console.log('cluster ' + e);
          });
        });
      };
      c++;
    });
    console.log(c+" Marker added to map!");

    // thanks to https://github.com/louh - Allow for offset on center of map
    L.Map.prototype.panToOffset = function (latlng, offset, options) {
        var x = this.latLngToContainerPoint(latlng).x - offset[0]
        var y = this.latLngToContainerPoint(latlng).y - offset[1]
        var point = this.containerPointToLatLng([x, y])
        return this.setView(point, this._zoom, { pan: options })
    }

}
