function ShowPlacesForLayer(map,text_layers,image_layers,marker_meta_layers,curve_layers,level) {
  'use strict';
  var layer_json_url = $('#selection').data('url');
    // '/maps/1/layers/1.json';
  if ( !layer_json_url ) {
    layer_json_url = $('#info-wrapper').data('url');
  }
  if ( !layer_json_url ) {
    layer_json_url = $('#form-wrapper').data('url');
  }

  // how to set data.id dynamically?
  var data_id = 1;
  var markerclusterSettings = {
          maxClusterRadius: 30,
          showCoverageOnHover: false,
          animate: true,
          iconCreateFunction: function(cluster) {
              return L.divIcon({
                html: '<div class="marker-cluster marker-cluster-small marker-cluster-layer-' + data_id + '"><div>' + cluster.getChildCount() + '</div></div>',
                className: "leaflet-data-markercluster",
                iconAnchor  : [15, 15],
                iconSize    : [30, 30],
                popupAnchor : [0, -28]
              });
            },


          spiderLegPolylineOptions: { weight: 0, color: '#efefef', opacity: 0.5 },

          elementsPlacementStrategy: "clock",
          helpingCircles: true,
          clockHelpingCircleOptions: {
            weight: 40,
            opacity: 0,
            color: "#000000",
            fill: "#333",
            fillOpacity: 0.2
          },

          spiderfyDistanceSurplus: 28,
          spiderfyDistanceMultiplier: 1,

          spiderfiedClassName: 'spiderfied-places',

          elementsMultiplier: 1.4,
          firstCircleElements: 10,
          spiderfyShapePositions: function(count, centerPt) {
                var distanceFromCenter = 50,
                    markerDistance = 105,
                    lineLength = markerDistance * (count - 1),
                    lineStart = centerPt.y - lineLength / 4,
                    res = [],
                    i;

                res.length = count;

                for (i = count - 1; i >= 0; i--) {
                    res[i] = new Point(centerPt.x + distanceFromCenter, lineStart + markerDistance * i);
                }

                return res;
            }
  };

  if(typeof layer_json_url !== 'undefined') {

    console.log("Drawing placemarks w/data from "+layer_json_url + " at level "+level);

    var request = $.getJSON(layer_json_url, function(data) {

      console.log("-----------------------------");
      console.log(data);

      // read params, place id is given, render this place special
      console.log("Check for url params");
      var params = getParams();

      var clustercolor = '#445';
      if ( level !== 'maps') {
        console.log("Render places of one layer");
        console.log(data);
        var marker_layers = L.markerClusterGroup(markerclusterSettings);
        clustercolor = data.color;
        var places = [];
        if (level === 'places') {
          places = data.places;
        } else {
          places = data.places;
        }
        var places_with_relations = data.places_with_relations;
        if ( data.iconset ) {
          console.log("DRAW ICONSET");
          $('body').addClass('iconset');
          marker_layers = L.featureGroup();
          drawIconset(map,data.id,marker_layers,params,data.iconset,places);
          $('.marker-cluster-small').addClass('marker-layer-'+data.id);
        } else {
          console.log("DRAW MARKER");
          drawMarkers(map,data.id,level,String(false),text_layers,image_layers,marker_layers,params,data.color,clustercolor,places);
          $('.marker-cluster-small').addClass('marker-layer-'+data.id);
        }
        drawCurves(map,data.id,curve_layers,marker_layers,data.color,clustercolor,places_with_relations,data.relations_bending,data.relations_coloring);
        marker_meta_layers.addLayer(marker_layers);

      } else  {
        // layers combined
        var all_places = [];
        var layers_count = data.layers.length;

        $.each(data.layers, function(key,data) {
          all_places.push(...data.places);
        });
        var show_annotations_on_map = data.show_annotations_on_map;

        marker_layers = L.markerClusterGroup(markerclusterSettings);
        $.each(all_places, function(key,data) {
          clustercolor = 'rgba(0, 54, 193, 0.9)';
          drawMarkers(map,data.id,level,show_annotations_on_map,text_layers,image_layers,marker_layers,params,data.layer_color,clustercolor,[data]);
        });
        marker_meta_layers.addLayer(marker_layers);


        // layers as batches
        $.each(data.layers, function(key,data) {
          // console.log("Render places of layer "+key+" (\""+data.title+"\") on map");
          /*
          if ( data.iconset ) {
            console.log("DRAW ICONSET");
            $('body').addClass('iconset');
            var marker_layers = L.featureGroup();
            drawIconset(map,data.id,marker_layers,params,data.iconset,data.places);
            $('.marker-cluster-small').addClass('marker-layer-'+data.id);
          } else {
            var marker_layers = L.markerClusterGroup(markerclusterSettings);
            clustercolor = data.color;
            // drawMarkers(map,data.id,level,false,text_layers,image_layers,marker_layers,params,data.color,clustercolor,data.places);
          }
          */
          console.log("Places_with_relations: "+data.places_with_relations.length);
          drawCurves(map,data.id,curve_layers,marker_layers,data.color,clustercolor,data.places_with_relations, data.relations_bending,data.relations_coloring);
          marker_meta_layers.addLayer(marker_layers);
        });

      }

      var layer_style = '';
      $.each(data.layers, function(key,data) {
          layer_style += "#map .marker-cluster-layer-" + data.id;
          layer_style += "{" +
              "border: 0px solid " + data.color + ";" +
            "}"+
            "#map .marker-cluster-layer-" + data.id + " div {" +
              "background-color: " + data.color + ";" +
            "}";
      });
      $("head").append("<style>" +
          "#map .marker-cluster-medium," +
          "#map .marker-cluster-small {" +
          "    background-color: transparent;" +
          "    border: 0px solid " + clustercolor + ";" +
          "    opacity: 0.9;" +
          "    width: 40px;" +
          "   height: 40px;" +
          "}" +
          "#map .marker-cluster-medium div," +
          "#map .marker-cluster-small div {" +
          "    background-color: " + clustercolor + ";" +
          "    transform: translate3d(-3px, -3px, 0px);" +
          "    font: 12px \"worksans-bold\",\"Helvetica Neue\", Arial, Helvetica, sans-serif;" +
          "    color: transparent;" +
          "    padding: 8px;" +
          "}" +
          layer_style +
      "</style>"
  );

        console.log("Fit to bounds routine");
        var bounds = marker_meta_layers.getBounds().pad(0.35);
        console.log("Set zoom to 12 (may be we overide custom zoomlevels with that?");
        var zoom = 0;
        var northeast = bounds.getNorthEast();
        var southwest = bounds.getSouthWest();

        if ( $('#selection').data('layer-mapcenter-lat') ) {
          console.log("Fit to custom map center and zoom");
          var mapcenter_lat = $('#selection').data('layer-mapcenter-lat');
          var mapcenter_lon = $('#selection').data('layer-mapcenter-lon');
          var mapcenter = L.latLng(mapcenter_lat, mapcenter_lon);
          console.log(mapcenter);
          bounds = L.latLngBounds([mapcenter]);
          zoom = $('#selection').data('layer-map-zoom');
        }
        else if ( $('#selection').data('map-extent-northeast') ) {
          console.log("Fit to custom map extent");
          /*
          var northeast_array = $('#selection').data('map-extent-northeast').split(",").map(Number);
          console.log(northeast_array);
          var southwest_array = $('#selection').data('map-extent-southwest').split(",").map(Number);
          console.log(southwest_array);
          northeast = L.latLng(northeast_array[0],northeast_array[1]);
          southwest = L.latLng(southwest_array[0],southwest_array[1]);
          */
          var northeast_array = $('#selection').data('map-extent-northeast');
          console.log("Map custom extend: NE "+  northeast_array);
          var southwest_array = $('#selection').data('map-extent-southwest');
          console.log("Map custom extend: SW "+  southwest_array);
          bounds = L.latLngBounds(northeast, southwest);
          bounds = L.latLngBounds(northeast_array.split(","), southwest_array.split(","));
        }

        // set map center after last user action
        if ( ( localStorage.getItem('SetCustomExtent') === 'true' ) && ( northeast_array ) ) {
          northeast_array = localStorage.getItem('UserMapBoundsNE');
          console.log("set map bounds to user values NE " + northeast_array);
          southwest_array = localStorage.getItem('UserMapBoundsSW');
          console.log("set map bounds to user values SW " + southwest_array);
          var boundsX = L.latLngBounds(northeast_array.split(","), southwest_array.split(","));
          console.log("Fit map bounds to user values " + bounds);
          map.fitBounds(boundsX, {maxZoom: 16, minZoom: 2});
        } else {
          console.log("Fit map bounds now");
          map.fitBounds(bounds, {maxZoom: 16, minZoom: 2});
          console.log("Override bounds if custom zoom. Set custom zoom level to " + zoom);
          if ( zoom > 0 ) {
            map.setZoom(zoom);
          }
        }
        // set map zoom level after last user action
        /* not needed for now
        var zl_after_fitbounds = map.getZoom();
        var zl = localStorage.getItem('UserZoomLevel');
        console.log("get zoom level if any " + zl);
        if ( zl && ( zl_after_fitbounds < zl )) {
          console.log("set zoom level to " + zl);
          // map.setZoom(zl);
        } */
        // set custom extent
        var params = getParams();
        if ( params.setbound )  {
          var extend_layer = L.featureGroup().addTo(map);
          var rect = L.rectangle(bounds, {color: 'white', weight: 5, opacity: 0.5, fill: false});
          // http://127.0.0.1:3000/maps/8/edit?northeast=1&southwest=2
          var setbound_url = $("#setbound").attr('href');
          console.log(setbound_url);
          setbound_url = setbound_url.replace(/\?northeast=(.*?)&s/, '?northeast='+northeast.lat.toPrecision(5)+","+northeast.lng.toPrecision(5)+'&s');
          setbound_url = setbound_url.replace(/&southwest=(.*)/, '&southwest='+southwest.lat.toPrecision(5)+","+southwest.lng.toPrecision(5));
          console.log(setbound_url);

          $("#setbound").attr('href', setbound_url);

          rect.editing.enable();
          map.addLayer(rect);
          rect.on('edit', function(e) {
            console.log('Map extent was edited!');
            var new_bound = rect.getBounds();
            northeast = new_bound.getNorthEast();
            southwest = new_bound.getSouthWest();
            console.log("get new bounds");
            console.log(northeast);
            setbound_url = setbound_url.replace(/\?northeast=(.*?)&s/, '?northeast='+northeast.lat.toPrecision(5)+","+northeast.lng.toPrecision(5)+'&s');
            setbound_url = setbound_url.replace(/&southwest=(.*)/, '&southwest='+southwest.lat.toPrecision(5)+","+southwest.lng.toPrecision(5));
            console.log(setbound_url);
            $("#setbound").attr('href', setbound_url);
          });
        }
    });
  }
}

function getParams() {
  'use strict';
  var url = window.location.href;
  var vars = {};
  var hashes = url.split("?")[1];
  if ( hashes ) {
    var hash = hashes.split('&');
    for (i = 0; i < hash.length; i++) {
      params=hash[i].split("=");
      vars[params[0]] = params[1];
    }
  }
  return vars;
}

/* cudos to https://stackoverflow.com/users/1031454/supersan */
function adjustColor(color, amount) {
    'use strict';
    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0'+Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
}