function ShowPlacesForLayer(map,level) {

  var layer_json_url = $('#selection').data('url');
    // '/maps/1/layers/1.json';
  console.log("Drawing placemarks w/data from "+layer_json_url);



  var request = $.getJSON(layer_json_url, function(data) {

    console.log("-----------------------------");
    console.log(data);

    // read params, place id is given, render this place special
    console.log("Check for url params");
    var params = getParams();
    if ( level === 'layers') {
      console.log("Render places of  one layer");
      DrawMarkers(map,params,data.color,data.places);
    } else  {
      $.each(data, function(key,places) {
        console.log("Render places of layer "+key+" on map");
        DrawMarkers(map,params,data[key].color,data[key].places);
      });
    }
  });
}
function DrawMarkers(map,params,color,places) {
    var c = 0;
    var CustomIcon = L.Icon.extend({
      options: {
        iconSize:     [30, 30],
        iconAnchor:   [15, 15],
        popupAnchor:  [-3, -76]
      }
    });

    $.each(places, function(key,place) {
      console.log("Place ID "+place.id+"////////");
      console.log(place.title+" @ "+place.lat+"/"+place.lon);
      if ( color ) {
        if ( place.published === true ) {
          var opacity="0.9"
        } else {
          var opacity="0.7"
        }
        var svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='#"+color+"' fill-opacity='"+opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
          var url = encodeURI("data:image/svg+xml," + svg).replace(new RegExp('#', 'g'),'%23');
          console.log(url);
        var icon =new CustomIcon({iconUrl: url})
      } else {
        if ( parseInt(place.id) === parseInt(params.place) ) {
          var icon = redIcon;
          console.log("PLACE FOR RE_MAP FOUND");
        } else if ( place.published === true ) {
          var icon = blueIcon;
        } else {
          var icon = greyIcon;
        }

      }
      // TODO: add to layer, not map
      var marker = L.marker([place.lat, place.lon], {icon: icon}).addTo(map);
      var content = '';
      if ( place.date ) {
        content += "<p>"+place.date;
        if ( place.address ) {
          content += " // "+place.address;
        }
        content += "</p>";
      }
      // console.log(content);
      content += "<h4>"+place.title;
      if ( place.edit_link ) {
        content += place.edit_link;
      }
      content += "</h4>";
      if ( place.imagelink ) {
        content += "<img src='"+place.imagelink+"' />";
      }
      if ( place.images && place.images[0] ) {
        $.each(place.images, function(kkey, image) {
          content += "<a href='"+image.image_url+"' target='_blank'><img src='"+image.image_url+"' /></a>";
        });
      }

      content += "<p>"+place.teaser.trim()    // remove leading and trailing spaces
    .substring(0, 200).split(" ").slice(0, -1).join(" ") + "...";

      marker.bindPopup(content).on('click', function(){ map.panTo(marker.getLatLng()) });
      c++;
    });
    console.log(c+" Marker added to map!");

}

function getParams() {
  var url = window.location.href
  var vars = {};
  var hashes = url.split("?")[1];
  if ( hashes ) {
    var hash = hashes.split('&');

    for (var i = 0; i < hash.length; i++) {
      params=hash[i].split("=");
      vars[params[0]] = params[1];
    }
  }
  return vars;
}