function ShowPlacesForLayer(map,text_layers,image_layers,marker_meta_layers,curve_layers,level) {

  var layer_json_url = $('#selection').data('url');
    // '/maps/1/layers/1.json';
  if ( !layer_json_url ) {
    layer_json_url = $('#info-wrapper').data('url');
  }
  if ( !layer_json_url ) {
    layer_json_url = $('#form-wrapper').data('url');
  }


  if(typeof layer_json_url !== 'undefined') {

    console.log("Drawing placemarks w/data from "+layer_json_url);

    var request = $.getJSON(layer_json_url, function(data) {

      console.log("-----------------------------");
      console.log(data);

      // read params, place id is given, render this place special
      console.log("Check for url params");
      var params = getParams();

      var clustercolor = '#445';
      if ( level !== 'maps') {
        console.log("Render places of one layer");
        console.log(data);
        var marker_layers = L.markerClusterGroup({
          maxClusterRadius: 20,
          animate: true,

          spiderLegPolylineOptions: { weight: 0, color: '#efefef', opacity: 0.5 },

          elementsPlacementStrategy: "clock",
          helpingCircles: false,

          spiderfyDistanceSurplus: 28,
          spiderfyDistanceMultiplier: 1,

          spiderfiedClassName: 'spiderfied-places',

          elementsMultiplier: 1.4,
          firstCircleElements: 10,
          spiderfyShapePositions: function(count, centerPt) {
                var distanceFromCenter = 100,
                    markerDistance = 145,
                    lineLength = markerDistance * (count - 1),
                    lineStart = centerPt.y - lineLength / 4,
                    res = [],
                    i;

                res.length = count;

                for (i = count - 1; i >= 0; i--) {
                    res[i] = new Point(centerPt.x + distanceFromCenter, lineStart + markerDistance * i);
                }

                return res;
            }
        });
        clustercolor = data.color;
        var places = new Array();
        if ( level === 'places') {
          places = data.places;
        } else {
          places = data.places;
        }
        var places_with_relations = data.places_with_relations;
        if ( data.iconset ) {
          console.log("DRAW ICONSET");
          $('body').addClass('iconset');
          var marker_layers = L.featureGroup();
          DrawIconset(map,data.id,marker_layers,params,data.iconset,places);
          $('.marker-cluster-small').addClass('marker-layer-'+data.id);
        } else {
          console.log("DRAW MARKER");
          DrawMarkers(map,data.id,text_layers,image_layers,marker_layers,params,data.color,clustercolor,places);
          $('.marker-cluster-small').addClass('marker-layer-'+data.id);
        }
        DrawCurves(map,data.id,curve_layers,data.color,clustercolor,places_with_relations);
        marker_meta_layers.addLayer(marker_layers);

      } else  {
        $.each(data.layers, function(key,data) {
          console.log("Render places of layer "+key+" (\""+data.title+"\") on map");
          if ( data.iconset ) {
            console.log("DRAW ICONSET");
            $('body').addClass('iconset');
            var marker_layers = L.featureGroup();
            DrawIconset(map,data.id,marker_layers,params,data.iconset,data.places);
            $('.marker-cluster-small').addClass('marker-layer-'+data.id);
          } else {
            var marker_layers = L.markerClusterGroup({
              maxClusterRadius: 20,
              iconCreateFunction: function(cluster) {
                  return L.divIcon({ html: '<div class="marker-cluster marker-cluster-small marker-cluster-layer-'+data.id+'"><div>' + cluster.getChildCount() + '</div></div>' });
                }
            });
            clustercolor = data.color;
            DrawMarkers(map,data.id,text_layers,image_layers,marker_layers,params,data.color,clustercolor,data.places);
          }
          marker_meta_layers.addLayer(marker_layers);

        });

      }

      var layer_style = '';
      $.each(data.layers, function(key,data) {
        layer_style += "#map .marker-cluster-layer-"+data.id+" {\
            border: 0px solid "+data.color+";\
          }\
          #map .marker-cluster-layer-"+data.id+" div {\
            background-color: "+data.color+";\
          }\
        ";
      });
      $("head").append("\
        <style>\
          #map .marker-cluster-medium, \
          #map .marker-cluster-small {\
              background-color: transparent;\
              border: 0px solid "+clustercolor+";\
              opacity: 0.9;\
              width: 40px;\
              height: 40px;\
          }\
          #map .marker-cluster-medium div,\
          #map .marker-cluster-small div {\
              background-color: "+clustercolor+";\
              transform: translate3d(-3px, -3px, 0px);\
              font: 12px \"worksans-bold\",\"Helvetica Neue\", Arial, Helvetica, sans-serif;\
              color: transparent;\
              padding: 8px;\
          }\
          "+layer_style+"\
        </style>\
        ");

        console.log("fit to bounds");
        var bounds = marker_meta_layers.getBounds().pad(0.35);
        var northeast = bounds.getNorthEast();
        var southwest = bounds.getSouthWest();
        if ( $('#selection').data('map-extent-northeast') ) {
          console.log("Fit to custom map extent");
          /*
          var northeast_array = $('#selection').data('map-extent-northeast').split(",").map(Number);
          console.log(northeast_array);
          var southwest_array = $('#selection').data('map-extent-southwest').split(",").map(Number);
          console.log(southwest_array);
          northeast = L.latLng(northeast_array[0],northeast_array[1]);
          southwest = L.latLng(southwest_array[0],southwest_array[1]);
          */
          var northeast_array = $('#selection').data('map-extent-northeast');
          console.log("Map custom extend: NE "+  northeast_array);
          var southwest_array = $('#selection').data('map-extent-southwest');
          console.log("Map custom extend: SW "+  southwest_array);
          bounds = L.latLngBounds(northeast, southwest);
          bounds = L.latLngBounds(northeast_array.split(","), southwest_array.split(","));
        }

        // set map center after last user action
        if ( ( localStorage.getItem('SetCustomExtent') === 'true' ) && ( northeast_array ) ) {
          var northeast_array = localStorage.getItem('UserMapBoundsNE');
          console.log("set map bounds to user values NE " + northeast_array);
          var southwest_array = localStorage.getItem('UserMapBoundsSW');
          console.log("set map bounds to user values SW " + southwest_array);
          var boundsX = L.latLngBounds(northeast_array.split(","), southwest_array.split(","));
          console.log("Fit map bounds to user values " + bounds);
          map.fitBounds(boundsX, {maxZoom: 16, minZoom: 2});
        } else {
          map.fitBounds(bounds, {maxZoom: 16, minZoom: 2});
          console.log("Fit map bounds to custom map values");
          console.log(bounds);
        }

        // set map zoom level after last user action
        /* not needed for now
        var zl_after_fitbounds = map.getZoom();
        var zl = localStorage.getItem('UserZoomLevel');
        console.log("get zoom level if any " + zl);
        if ( zl && ( zl_after_fitbounds < zl )) {
          console.log("set zoom level to " + zl);
          // map.setZoom(zl);
        } */
        // set custom extent
        var params = getParams();
        if ( params.setbound )  {
          var extend_layer = L.featureGroup().addTo(map);
          var rect = L.rectangle(bounds, {color: 'white', weight: 5, opacity: 0.5, fill: false});
          // http://127.0.0.1:3000/maps/8/edit?northeast=1&southwest=2
          var setbound_url = $("#setbound").attr('href');
          console.log(setbound_url);
          setbound_url = setbound_url.replace(/\?northeast=(.*?)\&s/, '?northeast='+northeast.lat.toPrecision(5)+","+northeast.lng.toPrecision(5)+'&s');
          setbound_url = setbound_url.replace(/\&southwest=(.*)/, '&southwest='+southwest.lat.toPrecision(5)+","+southwest.lng.toPrecision(5));
          console.log(setbound_url);

          $("#setbound").attr('href', setbound_url);

          rect.editing.enable();
          map.addLayer(rect);
          rect.on('edit', function(e) {
            console.log('Map extent was edited!');
            var new_bound = rect.getBounds();
            var northeast = new_bound.getNorthEast();
            var southwest = new_bound.getSouthWest();
            console.log("get new bounds");
            console.log(northeast);
            setbound_url = setbound_url.replace(/\?northeast=(.*?)\&s/, '?northeast='+northeast.lat.toPrecision(5)+","+northeast.lng.toPrecision(5)+'&s');
            setbound_url = setbound_url.replace(/\&southwest=(.*)/, '&southwest='+southwest.lat.toPrecision(5)+","+southwest.lng.toPrecision(5));
            console.log(setbound_url);
            $("#setbound").attr('href', setbound_url);

          });
        }

    });
  }
}

function DrawCurves(map,layer_id,curve_layers,color,clustercolor,places_with_relations) {

  var boost = 2.9;

  $.each(places_with_relations, function(key,place) {

    console.log("places_with_relations");
    console.log(key);
    console.log(place.relations);
    console.log(place.relations.length);
    console.log(place.relations);

    $.each(place.relations, function(key,relation) {

      console.log(relation.from.lat);
      console.log(relation.from.lon);
      console.log("Relation_from ID:  "+relation.from.id);
      var point1 = [Number(relation.from.lat), Number(relation.from.lon)];
      var point2 = [Number(relation.to.lat), Number(relation.to.lon)];
      console.log(point1);
      console.log(point2);

      var color = 'rgba(25,25,25,0.75)';
      var color = '#'+Math.floor(Math.random()*16777215).toString(16);

      var pathOptions = {
        color: color,
        weight: 8,
        opacity: 0.7,
        animate: {duration: 3000, iterations: Infinity},
        className: 'curve_normal curve_'+relation.from.id
      }
      var distance =  L.latLng(point1).distanceTo( L.latLng(point2));
      let distance_in_kms = ((distance) / 1000).toFixed(0);
      console.log("distance: "+distance_in_kms)
      var controlpoint = calcControlPoint(point2,point1,distance_in_kms,boost);
      console.log("controlpoint: "+controlpoint);
      // var marker = L.marker(controlpoint).addTo(curve_layers);
      var curvedPath = L.curve(
        [
          'M', point1,
          'Q', controlpoint,
             point2
        ], pathOptions);
      // curvedPath.addTo(marker_layers);
      curve_layers.addLayer(curvedPath);
    });

  });

}


// kudos to Ryan Catalani for this approach, CC_BY
function calcControlPoint(point1,point2,distance_in_kms,boost) {

  var d = 2;
  // TODO: need of distance between the endpoints of the curve
  // if transcontinental
  if ( distance_in_kms > 5000 ) {
    d = 4
  // if continental
  } else if ( distance_in_kms > 1000 ) {
    d = 4
  // if regional
  } else if ( distance_in_kms > 100 ) {
    d = 7
  // if local
  } else if ( distance_in_kms > 10 ) {
    d = 10
  // if close
  } else if ( distance_in_kms > 1 ) {
    d = 40
  } else if ( distance_in_kms < 1 ) {
    d = 800
  }


  var offsetX = point2[1] - point1[1],
  offsetY = point2[0] - point1[0];
  var r = Math.sqrt( Math.pow(offsetX, 0) + Math.pow(offsetY, 2) ),
            theta = Math.atan2(offsetY, offsetX);
  var thetaOffset = (3.14/boost);
  var r2 = (r/d)/(Math.cos(thetaOffset)),
            theta2 = theta + thetaOffset;
  var midpointX = (r2 * Math.cos(theta2)) + point1[1],
            midpointY = (r2 * Math.sin(theta2)) + point1[0];
  return midpointLatLng = [midpointY, midpointX];
}


function DrawMarkers(map,layer_id,text_layers,image_layers,marker_layers,params,color,clustercolor,places) {
    var c = 0;
    console.log("places: "+places.length);
    var CustomLargeIcon = L.Icon.extend({
      options: {
        iconSize:     [30, 30],
        iconAnchor:   [15, 15],
        popupAnchor:  [-2, -15]
      }
    });
    var CustomSmallIcon = L.Icon.extend({
      options: {
        iconSize:     [20, 20],
        iconAnchor:   [10, 10],
        popupAnchor:  [-1, -8]
      }
    });

    $.each(places, function(key,place) {
      // console.log("Place ID "+place.id+"//"+layer_id+"//////");
      // console.log(place.title+" @ "+place.lat+"/"+place.lon);
      if ( color ) {
        if ( place.published === true ) {
          var opacity="0.7"
        } else {
          var opacity="0.5"
        }
        if (color.indexOf('#') == -1) {
          color = '#'+color;
        }
        var svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='"+color+"' fill-opacity='"+opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
        var url = encodeURI("data:image/svg+xml," + svg).replace(new RegExp('#', 'g'),'%23');
        var icon = new CustomLargeIcon({iconUrl: url});
      } else {
        if ( parseInt(place.id) === parseInt(params.place) ) {
          var icon = redIcon;
          console.log("PLACE FOR RE_MAP FOUND");
        } else if ( place.published === true ) {
          var icon = blueIcon;
        } else {
          var icon = greyIcon;
        }
      }


      // alternative place display marker as text
      // TODO: display switch
      var texticon= L.divIcon({
          html: '<div class="text_inner">'+place.title+'</div>',
          iconAnchor:[30,75],
          iconSize:null,
          popupAnchor:[0,0] });
      var textmarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: texticon}).addTo(text_layers);


      // alternative place display image instead of a marker
      var small_opacity="0.8";
      var small_color=adjustColor(color, -60);
      var small_svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='"+small_color+"' fill-opacity='"+small_opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
      var small_icon_url = encodeURI("data:image/svg+xml," + small_svg).replace(new RegExp('#', 'g'),'%23');
      var small_icon =new CustomSmallIcon({iconUrl: small_icon_url})
      var small_icon_marker = L.marker([place.lat, place.lon], {icon: small_icon}).addTo(image_layers);

      var html = '';

      if ( place.images && place.images[0] ) {
        html = "<a href='"+place.images[0].image_url+"' target='_blank'><img src='"+place.images[0].image_url+"' /></a>";
      } else {
        html = "";
      }
      if ( place.imagelink2 ) {
        html = "<img src='"+place.imagelink2+"' />";
      }
      var texticon= L.divIcon({
          html: '<div class="image_inner">'+html+'</div>',
          iconAnchor:[0,0],
          iconSize:null,
          popupAnchor:[0,0] });
      var textmarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: texticon}).addTo(image_layers);



      // TODO: add to layer, not map
      // var marker = L.marker([place.lat, place.lon], {icon: icon}).addTo(marker_layers);
      // layercluster
      var marker = L.marker([place.lat, place.lon], {icon: icon})
      marker_layers.addLayer(marker);



      var content = '';
      if ( place.images && place.images[0] ) {
        $.each(place.images, function(kkey, image) {
          content += "<img src='"+image.image_url+"' />";
        });
      }
      if ( place.imagelink2 ) {
        content += "<img src='"+place.imagelink2+"' />";
      } else if ( place.imagelink ) {
        content += "<img src='"+place.imagelink+"' />";
      }
      content += '<div class="leaflet-popup-content-text">';
      if ( place.date ) {
        content += "<p>"+place.date;
        if ( place.address ) {
          content += " // "+place.address;
        }
        content += "</p>";
      }
      // console.log(content);
      content += "<h4>";
      if ( place.show_link ) {
        content += place.show_link;
        if ( place.published !== true ) {
          content += " <i class='fi-lock fi-18'></i>";
        }
      }
      content += "</h4>";
      var teaser = place.teaser.replace(/<[^>]*>?/gm, ''); // remove html
      teaser = teaser.replace(/(?:\r\n|\r|\n)/g, '<br>'); // line breaks
      if ( teaser.length > 400 ) {
        teaser = place.teaser.trim()    // remove leading and trailing spaces
                .substring(0, 400).split(" ").slice(0, -1).join(" ") + "...";
      }
      content += "<p>"+teaser;
      if ( place.edit_link ) {
        content += place.edit_link;
      }
      content += "</p>";
      content += '</div>';
      marker.bindPopup(content).on('click', function(){
        // map.panTo(marker.getLatLng());
        // map.panToOffset(marker.getLatLng(),[0,60]);

        if ( $('#addresslookup_address').hasClass('hide') ) {
          // ShowLookUpField();
        } else {
          ClearLookUpField();
        }

      });
      marker.on('click', function (e) {
        console.log('marker');
        console.log(e);
      });
      marker.on('clusterclick', function (e) {
        // a.layer is actually a cluster
        console.log('cluster ' + e);
        console.log('cluster ' + e.layer.getAllChildMarkers().length);
      });
      if ( $('#selection').data('map-popup-display-mode') != 'click' ) {
        marker.on('mouseover', function (e) {
            map.closePopup();
            this.openPopup();
        });
        marker.on('mouseout', function (e) {
            // this.closePopup();
        });
      }
      // NEW 2021: Add annotations on the map, if any
      if ( place.annotations ) {
        $.each(place.annotations, function(kkey,annotation) {
          var a_marker = L.marker([place.lat, place.lon], {icon: small_icon})
          marker_layers.addLayer(a_marker);
          var content = '';
          content += '<div class="leaflet-popup-content-text">';
          if ( annotation.person_name ) {
            content += "<p>"+annotation.person_name;
            content += "</p>";
          }

          content += "<p>";
          if ( annotation.title ) {
            content += "<strong>";
            content += annotation.title;
            content += "</strong>";
          }
          content += annotation.text.substring(0, 150).split(" ").slice(0, -1).join(" ") + "...";
          content += "</p>";

          a_marker.bindPopup(content).on('click');
          a_marker.on('click', function (e) {
            console.log('marker');
            console.log(e);
          });
          a_marker.on('clusterclick', function (e) {
            // a.layer is actually a cluster
            console.log('cluster ' + e);
          });
        });
      };
      c++;
    });
    console.log(c+" Marker added to map!");

    // thanks to https://github.com/louh - Allow for offset on center of map
    L.Map.prototype.panToOffset = function (latlng, offset, options) {
        var x = this.latLngToContainerPoint(latlng).x - offset[0]
        var y = this.latLngToContainerPoint(latlng).y - offset[1]
        var point = this.containerPointToLatLng([x, y])
        return this.setView(point, this._zoom, { pan: options })
    }

}

function getParams() {
  var url = window.location.href
  var vars = {};
  var hashes = url.split("?")[1];
  if ( hashes ) {
    var hash = hashes.split('&');

    for (var i = 0; i < hash.length; i++) {
      params=hash[i].split("=");
      vars[params[0]] = params[1];
    }
  }
  return vars;
}

/* cudos to https://stackoverflow.com/users/1031454/supersan */
function adjustColor(color, amount) {
    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0'+Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
}

