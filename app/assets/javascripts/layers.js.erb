function ShowPlacesForLayer(map,text_layers,image_layers,marker_meta_layers,level) {

  var layer_json_url = $('#info-wrapper').data('url');
    // '/maps/1/layers/1.json';
  console.log("Drawing placemarks w/data from "+layer_json_url);



  var request = $.getJSON(layer_json_url, function(data) {

    console.log("-----------------------------");
    console.log(data);

    // read params, place id is given, render this place special
    console.log("Check for url params");
    var params = getParams();

    var clustercolor = '#445';
    if ( level !== 'maps') {
      console.log("Render places of one layer");
      console.log(data);
      var marker_layers = L.markerClusterGroup({
        maxClusterRadius: 20
      });
      clustercolor = data.color;
      var places = new Array();
      if ( level === 'places') {
        places = {data};
      } else {
        places = data.places;
      }
      DrawMarkers(map,data.id,text_layers,image_layers,marker_layers,params,data.color,clustercolor,places);
      $('.marker-cluster-small').addClass('marker-layer-'+data.id);
      marker_meta_layers.addLayer(marker_layers);

    } else  {
      $.each(data.layers, function(key,data) {
        console.log("Render places of layer "+key+" (\""+data.title+"\") on map");
        var marker_layers = L.markerClusterGroup({
          maxClusterRadius: 20,
          iconCreateFunction: function(cluster) {
              return L.divIcon({ html: '<div class="marker-cluster marker-cluster-small marker-cluster-layer-'+data.id+'"><div>' + cluster.getChildCount() + '</div></div>' });
            }
        });
        clustercolor = data.color;
        DrawMarkers(map,data.id,text_layers,image_layers,marker_layers,params,data.color,clustercolor,data.places);
        map.addLayer(marker_layers);
      });
    }

    var layer_style = '';
    $.each(data.layers, function(key,data) {
      layer_style += "\
        #map .marker-cluster-layer-"+data.id+" {\
          border: 3px solid "+data.color+";\
        }\
        #map .marker-cluster-layer-"+data.id+" div {\
          background-color: "+data.color+";\
        }\
      ";
    });
    $("head").append("\
      <style>\
        #map .marker-cluster-medium, \
        #map .marker-cluster-small {\
            background-color: transparent;\
            border: 3px solid "+clustercolor+";\
            opacity: 0.9;\
            width: 40px;\
            height: 40px;\
        }\
        #map .marker-cluster-medium div,\
        #map .marker-cluster-small div {\
            background-color: "+clustercolor+";\
            transform: translate3d(-3px, -3px, 0px);\
            font: 12px \"worksans-bold\",\"Helvetica Neue\", Arial, Helvetica, sans-serif;\
            color: transparent;\
            padding: 8px;\
        }\
        "+layer_style+"\
      </style>\
      ");

    console.log("fit to bounds");
    var bounds = marker_meta_layers.getBounds();
    map.fitBounds(bounds, {maxzoom: 12, padding: [300,300]});
  });
}
function DrawMarkers(map,layer_id,text_layers,image_layers,marker_layers,params,color,clustercolor,places) {
    var c = 0;
    console.log("places: "+places.length);
    var CustomLargeIcon = L.Icon.extend({
      options: {
        iconSize:     [30, 30],
        iconAnchor:   [15, 15],
        popupAnchor:  [-2, -20]
      }
    });
    var CustomSmallIcon = L.Icon.extend({
      options: {
        iconSize:     [12, 12],
        iconAnchor:   [6, 6]
      }
    });

    $.each(places, function(key,place) {
      console.log("Place ID "+place.id+"//"+layer_id+"//////");
      console.log(place.title+" @ "+place.lat+"/"+place.lon);
      if ( color ) {
        if ( place.published === true ) {
          var opacity="0.9"
        } else {
          var opacity="0.7"
        }
        if (color.indexOf('#') == -1) {
          color = '#'+color;
        }
        console.log("--------------");
        console.log(color);
        var svg = "<svg height='30' width='30' xmlns='http://www.w3.org/2000/svg'><circle cx='15' cy='15' r='15' fill='"+color+"' fill-opacity='"+opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
        var url = encodeURI("data:image/svg+xml," + svg).replace(new RegExp('#', 'g'),'%23');
        var icon = new CustomLargeIcon({iconUrl: url});
        console.log("assign cluster-color")

      } else {
        if ( parseInt(place.id) === parseInt(params.place) ) {
          var icon = redIcon;
          console.log("PLACE FOR RE_MAP FOUND");
        } else if ( place.published === true ) {
          var icon = blueIcon;
        } else {
          var icon = greyIcon;
        }

      }


      // alternative place display marker as text
      // TODO: display switch
      var texticon= L.divIcon({
          html: '<div class="text_inner">'+place.title+'</div>',
          iconAnchor:[10,40],
          iconSize:null,
          popupAnchor:[0,0] });
      var textmarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: texticon}).addTo(text_layers);


      // alternative place display image instead of a marker

      var small_svg = "<svg height='14' width='14' xmlns='http://www.w3.org/2000/svg'><circle cx='7' cy='7' r='7' fill='"+color+"' fill-opacity='"+opacity+"' shape-rendering='geometricPrecision'></circle></svg>";
      var small_icon_url = encodeURI("data:image/svg+xml," + small_svg).replace(new RegExp('#', 'g'),'%23');
      var small_icon =new CustomSmallIcon({iconUrl: small_icon_url})
      var small_icon_marker = L.marker([place.lat, place.lon], {icon: small_icon}).addTo(image_layers);
      var small_icon_marker = L.marker([place.lat, place.lon], {icon: small_icon}).addTo(text_layers);

      var html = '';
      if ( place.images && place.images[0] ) {
        html = "<a href='"+place.images[0].image_url+"' target='_blank'><img src='"+place.images[0].image_url+"' /></a>";
      } else {
        html = "";
      }

      var texticon= L.divIcon({
          html: '<div class="image_inner">'+html+'</div>',
          iconAnchor:[0,0],
          iconSize:null,
          popupAnchor:[0,0] });
      var textmarker = new L.marker([place.lat, place.lon], {customId:"context"+c, icon: texticon}).addTo(image_layers);



      // TODO: add to layer, not map
      // var marker = L.marker([place.lat, place.lon], {icon: icon}).addTo(marker_layers);
      // layercluster
      var marker = L.marker([place.lat, place.lon], {icon: icon})
      marker_layers.addLayer(marker);
      var content = '';
      if ( place.images && place.images[0] ) {
        $.each(place.images, function(kkey, image) {
          content += "<img src='"+image.image_url+"' />";
        });
      }

      if ( place.date ) {
        content += "<p>"+place.date;
        if ( place.address ) {
          content += " // "+place.address;
        }
        content += "</p>";
      }
      // console.log(content);
      content += "<h4>";
      if ( place.show_link ) {
        content += place.show_link;
      }
      content += "</h4>";
      if ( place.imagelink ) {
        content += "<img src='"+place.imagelink+"' />";
      }

      content += "<p>"+place.teaser.trim()    // remove leading and trailing spaces
                .substring(0, 400).split(" ").slice(0, -1).join(" ") + "...";
      if ( place.edit_link ) {
        content += place.edit_link;
      }
      content += "</p>";

      marker.bindPopup(content).on('click', function(){
          // map.panTo(marker.getLatLng());
          map.panToOffset(marker.getLatLng(),[0,60]);


          if ( $('#addresslookup_address').hasClass('hide') ) {
            // ShowLookUpField();
          } else {
            ClearLookUpField();
          }
      });
      c++;
    });
    console.log(c+" Marker added to map!");

    // thanks to https://github.com/louh
    L.Map.prototype.panToOffset = function (latlng, offset, options) {
        var x = this.latLngToContainerPoint(latlng).x - offset[0]
        var y = this.latLngToContainerPoint(latlng).y - offset[1]
        var point = this.containerPointToLatLng([x, y])
        return this.setView(point, this._zoom, { pan: options })
    }

}

function getParams() {
  var url = window.location.href
  var vars = {};
  var hashes = url.split("?")[1];
  if ( hashes ) {
    var hash = hashes.split('&');

    for (var i = 0; i < hash.length; i++) {
      params=hash[i].split("=");
      vars[params[0]] = params[1];
    }
  }
  return vars;
}



