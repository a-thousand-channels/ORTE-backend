= simple_form_for(@map) do |f|
  .grid-x
    .large-12.cell
      = f.error_notification
  .grid-x
    .large-12.cell
      .form-inputs
        .grid-x.grid-padding-x
          .large-8.medium-7.small-6.cell
            = f.input :title
            = f.input :subtitle
          .large-4.medium-5.small-6.cell
            %p
              = f.input :published, :label => 'Publish <i class="fi-eye fi-21"></i>'.html_safe
        .grid-x.grid-padding-x
          .large-12.medium-12.small-12.cell
            = tinymce
            = f.input :text, :label => 'Description', :input_html => {:rows => 8, class: 'large-text tinymce' }
        - if admin?
          %hr
          .grid-x.grid-padding-x
            .large-12.cell
              %label Settings for Admins only
          .grid-x.grid-padding-x
            .large-6.medium-6.small-6.cell
              %p
                = f.association :group, collection: Group.by_user(current_user), include_blank: false
              %p.hint User group, that has access to edit this map and its layers
              %p
                = f.input :preview_url, input_html: { placeholder: 'https://' }
              %p.hint URL to a frontend app for live preview.
              %p.hint The app should understand the JSON from this backend. Its URL will be provided as a POST param (?layer=)
            .large-6.medium-6.small-12.cell
              %p
                = f.input :enable_privacy_features, :input_html => { :class => '' }, label: 'Enable privacy features'
              %p.hint This option allows the privacy features to be activated (but this does not activate them)
              %p
                = f.input :enable_map_to_go, :input_html => { :class => '' }, label: 'Enable the Map to go feature'
              %p.hint This option enables that a user can use the Map to go function and the live preview

        - else
          %i.fi-torsos-all.fi-21
            = current_user.group.title
          = f.association :group, as: :hidden, :input_html => {:value => current_user.group.id}
        %hr
        .grid-x.grid-padding-x
          .large-4.medium-4.small-6.cell
            %p
              = f.input :popup_display_mode, :collection => popup_display_mode_for_select, :input_html => { :class => '' }, label: 'Popup display mode'
            %p.hint
              Choose, which event triggers the display of the popup of a place

          .large-4.medium-4.small-6.cell
            %p
              = f.association :iconset
            %p.hint
              Select a predefined set of icons for this map
              %i.fi.fi-info{"data-tooltip"=>true, :title=>"You can select one of these iconsets, which will be used to display your places on the map. If none is selected, coloured circles are used as the default icons."}
          .large-4.medium-4.small-12.cell
            %p
              = f.input :show_annotations_on_map, :input_html => { :class => '' }, label: 'Show annotations'
            %p.hint
              Annotations are additional texts added to a place, like a quote, describing the place.

        %hr
        .grid-x.grid-padding-x
          .large-6.medium-6.small-12.cell

            %p
              = f.input :basemap_url, :input_html => {:placeholder => 'https://server/directory/{z}/{y}/{x}'}
            %p.hint
              URL for a custom basemap
              %i.fi.fi-info{"data-tooltip"=>true, :title=>"Default are Esri satellite images. Here you can efine a basemap for this map. It must have the following syntax: 'https://server/directory/{z}/{y}/{x}"}
          .large-6.medium-6.small-12.cell
            %p
              = f.input :basemap_attribution, :input_html => {:placeholder => ''}
            %p.hint
              Attribution for the custom basemap
              %i.fi.fi-info{"data-tooltip"=>true, :title=>"Basemap are made by someone, you should credit them here. Licences of most providers like Openstreetmap require to mention them properly."}

        %hr
        .grid-x.grid-padding-x
          .large-6.medium-10.cell#mapcenter
            %h5 Default map center
            %p.hint.text-left Set these geocoordinates if you want a to override the automatic map center (calculated by the extent of all places of this map and its layers)
          .large-6.medium-2.cell
            \&nbsp;
        .grid-x.grid-padding-x
          .medium-5.cell
            = f.input :mapcenter_lat, label: "Latitude", input_html: { placeholder: '53.0000'}
          .medium-5.cell
            = f.input :mapcenter_lon, label: "Longitude", input_html: { placeholder: '10.0000'}
          .medium-2.cell
            = f.input :zoom, label: "Zoom", input_html: { placeholder: '12'}
            %p.hint 1-18
        - if admin? && params[:action] == 'edit'
          %hr
          .grid-x.grid-padding-x
            .large-12.medium-12.small-12.cell
              %h5
                Map extend
              .grid-x.grid-padding-x
                .large-6.medium-6.small-6.cell
                  %p.hint
                    The map extend defines the focus where the map is zoomed.
                  %p.hint
                    Per default the map zooms to an extend, so all places are visible.
                    If you want to set a custom map extend, you can define it here.
                .large-6.medium-6.small-6.cell
                  %p#setbound.clear
                    = link_to map_path(@map, setbound: true), :class =>"button small" do
                      %strong Set custom map extend
                  - if @map.northeast_corner.present?
                    .grid-x.grid-padding-x1
                      .large-6.medium-6.small-12.cell
                        %p
                          = f.input :northeast_corner, :label => 'North-East'
                      .large-6.medium-6.small-12.cell
                        %p
                          = f.input :southwest_corner,  :label => 'South-West'
        %hr
        - # = f.input :script
      .form-actions
        %p
          - # disable_with: rails5 ujs
          = f.button :submit, :class => "button", :data => { "disable_with" => false }

- if admin? && params[:action] == 'edit'
  - if @map.layers.count == 0
    %hr
    = link_to @map, :method => :delete, :data => { :confirm => 'Are you sure?' }, :class => 'button warning' do
      %i.fi.fi-x
      Delete map
  %br
  %p.shy
    Note: Only admins can delete a map. You are an admin.
    %br
    But you can delete this map only if you've deleted all places and layers associated this map :#
    %br
    Then at this place a delete button will be available.
