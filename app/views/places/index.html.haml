- content_for(:title) { "Places of #{@layer.title}" }


#table-wrapper
  %p.text-right.close_link_wrapper
    = link_to map_layer_url(@map,@layer), :class=>"close-link", "aria-label"=>"Close back" do
      %span{"aria-hidden"=>"true"}
        %i.fi.fi-x
  %h1
    = link_to map_path(@layer.map) do
      = @layer.map.title
    —
    = link_to map_layer_path(@layer.map,@layer) do
      = @layer.title
    %span.shy (with #{@layer.places.count} Places)

  .grid-x.grid-padding-x
    .medium-12.cell.card
      %p.text-left.hint-simple
        - if @layer.published
          %i.fi-eye.fi-18
          This content of this layer is visible to the public
        - else
          %i.fi-lock.fi-18
          The content of this layer is not public
      - if @map.enable_time_slider
        %p.text-left.hint-simple
          %i.fi-clock.fi-18
          The time slider for this layer is activated
      %p.text-left.hint-simple
        
  .grid-x.grid-padding-x
    .medium-7.cell.card
      %p.text-left.hint-simple
        Privacy settings for this layer:
      %ul.hint
        %li
          - if @layer.exif_remove
            %i.fi-check.fi-18
            All EXIF data will be removed from uploaded images
          - else
            %i.fi-alert.fi-18
            EXIF data of uploaded images will not be removed
        %li
          - if @layer.rasterize_images
            %i.fi-check.fi-18
            Images will be displayed with a halftone raster
          - else
            %i.fi-alert.fi-18
            All images will be displayed unchanged
      %p.text-left.hint-simple
        You can change these settings
        = link_to edit_map_layer_path(@map,@layer) do
          in the edit mode
        %br
        %br
    .medium-5.cell
      %ul.hint
        %li
          = link_to annotations_map_layer_path(@map,@layer) do
            All Annotations (about Places)
        %li
          = link_to relations_map_layer_path(@map,@layer) do
            All relations (between places)
        %li
          = link_to images_map_layer_path(@map,@layer) do
            List of all images
      %hr
      %ul.hint
        %li
          = link_to import_map_layer_path(@map,@layer) do
            Import CSV to create places from
  %p
    &nbsp;
  - if @map.enable_time_slider
    %table#timeline-list
      %thead
        %tr
          %th#timeline-list-header{colspan:2}
            %p
              - minyear = @places.reject { |place| place.startdate.nil? }.min_by { |place| place.startdate.year }&.startdate&.year || Date.today.year
              - maxyear = @places.reject { |place| place.enddate.nil? }.max_by { |place| place.enddate.year }&.enddate&.year || Date.today.year
              %b
                Timeline coverage
              from
              = minyear
              - if minyear != maxyear
                \—
                = maxyear
              - timespan = maxyear-minyear+1
              (#{timespan} #{timespan > 1 ? 'years' : 'year'})
              >>
        %tr
          %th#timeline-list-info{colspan:2}            
            %p
              %label.small
                Displays the "coverage" of all start/enddates in this layer. Dates in brackets are the new fuzzy dates with qualifiers (this replaces the fixed date format)
                %i.fi.fi-info{"data-tooltip"=>true, :title=>"This is a new feature to allow to define fuzzy dates, where either the start or end is not exactly known. You have to set a qualifier in the edit form of each place to use this feature."}
      %tbody#timeline-list-body      
        - @places.sort_by{ |e| e.startdate.nil? ? Date.new : e.startdate }.each do |place|
          %tr 
            %td
              %p
                = smart_date_display(place.startdate, place.enddate)
                - if place.startdate_qualifier.present? || place.enddate_qualifier.present?
                  %br
                  %label.small
                    (#{smart_date_display_with_qualifier(place.startdate, place.enddate, place.startdate_qualifier, place.enddate_qualifier)})
                  %br
                %em
                  = place.title
                = link_to edit_map_layer_place_path(place.layer.map,place.layer,place), 
                  :class => "",
                  :title => "Edit this place" do
                  %i.fi-pencil

            %td.nobr
              - for i in minyear..maxyear
                - if place.startdate && place.startdate.year == i
                  %span.time.time-first>‒
                - elsif place.startdate && place.startdate.year < i && place.enddate && place.enddate.year > i
                  %span.time.time-on>‒
                - else
                  %span.time.time-off>‒
  

  
  %p.text-right.small
    Showing #{@places.count} of #{@layer.places.count}
    = paginate @places
  %table
    %thead
      %tr
        %th Place
        %th
          &nbsp;

    %tbody
      - @places.sort_by{ |e| e.startdate.nil? ? Date.new(9999) : e.startdate }.each do |place|
        %tr.place{"data-startyear":(place.startdate ? place.startdate.year : ''),"data-endyear":(place.enddate ? place.enddate.year : '')}
          %td
            = render 'places/list/place', place: place
          %td
            = link_to edit_map_layer_place_path(place.layer.map,place.layer,place), :class => "button small" do
              %i.fi-pencil.fi-21
              Edit
            %br
            - images = Image.where(place_id: place.id)
            - if images.count > 0
              %i.fi-photo.fi-21
              = images.count
              Images
              %br
            - videos = Video.where(place_id: place.id)
            - if videos.count > 0
              %i.fi-projection-screen.fi-21
              = videos.count
              Videos
              %br
            = link_to new_map_layer_place_image_path(place.layer.map,place.layer,place), :class => "button small" do
              %i.fi-plus.fi-21
              Image
            %br
            = link_to new_map_layer_place_video_path(place.layer.map,place.layer,place), :class => "button small" do
              %i.fi-plus.fi-21
              Video
            - if admin? && current_user.group.title == 'Admins'
              %br
              = link_to clone_map_layer_place_path(place.layer.map,place.layer,place), :class => 'button small secondary', :title=>'Make a copy of this place and edit' do
                %i.fi-page-copy.fi-21
                Copy
            %br
            - if place.images.count > 0 || place.videos.count > 0
              - warning = 'Are you sure to delete this place and all attached images and/or videos?'
            - else
              - warning = 'Are you sure to delete this place?'
            = link_to map_layer_place_path(place.layer.map,place.layer,place), method: :delete, data: { confirm:warning }, :class => "button alert small" do
              %i.fi-trash.fi-21
              Destroy
  %p.text-right= paginate @places